//
///* DO NOT EDIT THIS FILE - it is machine generated */
//// 引用Android准备好的
//#include <cstring>
//#include <jni.h>
//#include <cinttypes>
//#include <android/log.h>
//
//// 这里引用kaldi及自己写的
//#include "api.h"
//
//#define LOG_TAG "System.out"
//#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__) // 调用Android的log。
//
///* Header for class com_example_kwang_kaldiandroid_util_KaldiUtil */
//
//#ifndef _Included_com_example_kwang_kaldiandroid_util_KaldiUtil
//#define _Included_com_example_kwang_kaldiandroid_util_KaldiUtil
//#ifdef __cplusplus
//extern "C" {
//#endif
//
////
//// Created by kaicheng.wang on 2022/7/11.
////
//using namespace  kaldi;
//
//
//VModel *vmodel_new(const char *model_path)
//{
//    try {
//        return (VModel *)new Model(model_path);
//    } catch (...) {
//        return nullptr;
//    }
//}
//
//void vmodel_free(VModel *model)
//{
//    if (model == nullptr) {
//        return;
//    }
//    ((Model *)model)->Unref();
//}
//
//int vmodel_find_word(VModel *model, const char *word)
//{
//    return (int) ((Model *)model)->FindWord(word);
//}
//
//VRecognizer *vrecognizer_new(VModel *model) {
//    try {
//        return (VRecognizer *)new Recognizer((Model *)model);
//    } catch (...) {
//        return nullptr;
//    }
//}
//
//void vrecognizer_free(VRecognizer *recognizer) {
//    delete (Recognizer *)(recognizer);
//}
//void vrecognizer_reset(VRecognizer *recognizer)
//{
//    ((Recognizer *)recognizer)->Reset();
//}
//
//int vrecognizer_accept_waveform_s(VRecognizer *recognizer, const short *data, int length)
//{
//    try {
//        return ((Recognizer *)(recognizer))->AcceptWaveform(data, length);
//    } catch (...) {
//        return -1;
//    }
//}
//
//const char *vrecognizer_result(VRecognizer *recognizer)
//{
//    return ((Recognizer *)recognizer)->Result();
//}
//
//const char *vrecognizer_partial_result(VRecognizer *recognizer)
//{
//    return ((Recognizer *)recognizer)->PartialResult();
//}
//
//const char *vrecognizer_final_result(VRecognizer *recognizer)
//{
//    return ((Recognizer *)recognizer)->FinalResult();
//}
//
//
//
//
//
///* 这个是原h文件声明的函数，这里直接修改为实现函数。
//* Class:     com_example_kwang_kaldiandroid_util_KaldiUtil
//* Method:    KaldiMathLogAdd
//* Signature: (DD)D
//*/
////JNIEXPORT jdouble JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_KaldiMathLogAdd
////  (JNIEnv *jniEnv, jclass, jdouble x, jdouble y) {
////
////    LOGE("进入JNI的范畴了", "");
////    LOGE("调用kaldi的函数", "");
////
////    double v = kaldi::LogAdd(x, y); // 调用 base/kaldi-math.h 中的函数
////
////    LOGE("kaldi计算结束，返回java", "");
////
////    return v;
////
////  };
////
////jboolean bGetResult = JNI_FALSE;
////Recognizer* recognizer = nullptr;
////
////
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_startEngine
////        (JNIEnv *jniEnv, jclass, jstring model_path) {
////    const char* model_path_chars = jniEnv->GetStringUTFChars(model_path, 0);
////    recognizer = new Recognizer(new Model(model_path_chars));
////    LOGE("Start engine", "");
////
////};
////
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_stopEngine
////        (JNIEnv *jniEnv, jclass) {
////
////    delete recognizer;
////
////    LOGE("Stop engine", "");
////
////};
////
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_startRecognition
////        (JNIEnv *jniEnv, jclass, jshortArray data, int length) {
////
////    bGetResult = JNI_TRUE;
////    LOGE("Start recognition", "");
////    jboolean *isCopy = JNI_FALSE;
////    const short * sdata = jniEnv->GetShortArrayElements(data, isCopy);
////    recognizer->AcceptWaveform(sdata, length);
////};
////
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_stopRecognition
////        (JNIEnv *jniEnv, jclass) {
////
////    bGetResult = JNI_FALSE;
////    LOGE("Stop recognition", "");
////    recognizer->Reset();
////
////};
////JNIEXPORT jstring JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_getResultString
////        (JNIEnv *jniEnv, jclass) {
////
////
////    LOGE("Get result string", "");
////    jstring s  = jniEnv->NewStringUTF(""); // 不能强转
////    if (bGetResult) {
////        const char *str = recognizer->PartialResult();
////        s = jniEnv->NewStringUTF(str);
////    }
////    return s;
////};
//
//
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_startEngine
////        (JNIEnv *jniEnv, jclass) {
////
////    LOGE("Start engine", "");
////
////};
//
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_stopEngine
////        (JNIEnv *jniEnv, jclass) {
////
////
////    LOGE("Stop engine", "");
////
////};
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_startRecognition
////        (JNIEnv *jniEnv, jclass) {
////
////    bGetResult = JNI_TRUE;
////    LOGE("Start recognition", "");
////
////};
////
////JNIEXPORT void JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_stopRecognition
////        (JNIEnv *jniEnv, jclass) {
////
////    bGetResult = JNI_FALSE;
////    LOGE("Stop recognition", "");
////
////};
//
////JNIEXPORT jstring JNICALL Java_com_example_kwang_kaldiandroid_util_KaldiUtil_getResultString
////        (JNIEnv *jniEnv, jclass) {
////
////
////    LOGE("Get result string", "");
////    jstring s  = jniEnv->NewStringUTF(""); // 不能强转
////    if (bGetResult) {
////        const char *str = "processing\n";
////        s = jniEnv->NewStringUTF(str);
////    }
////    return s;
////};
//
//
//
//#ifdef __cplusplus
//}
//#endif
//#endif